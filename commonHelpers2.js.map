{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nconst startButton = document.querySelector('button[data-start]');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\nconst dateTimePicker = document.getElementById('datetime-picker');\n\nlet countdownInterval = null;\nlet selectedDate = null;\n\nstartButton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const now = new Date();\n    selectedDate = selectedDates[0];\n\n    if (selectedDate <= now) {\n      alert('Please choose a date in the future');\n      selectedDate = null;\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nstartButton.addEventListener('click', () => {\n  if (countdownInterval) {\n    clearInterval(countdownInterval);\n  }\n\n  startButton.disabled = true;\n  dateTimePicker.disabled = true;\n\n  countdownInterval = setInterval(() => {\n    const now = new Date();\n    const timeRemaining = selectedDate - now;\n\n    if (timeRemaining <= 0) {\n      clearInterval(countdownInterval);\n      updateTimerDisplay(0, 0, 0, 0);\n    } else {\n      const { days, hours, minutes, seconds } = convertMs(timeRemaining);\n      updateTimerDisplay(days, hours, minutes, seconds);\n    }\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimerDisplay(days, hours, minutes, seconds) {\n  daysValue.textContent = addLeadingZero(days);\n  hoursValue.textContent = addLeadingZero(hours);\n  minutesValue.textContent = addLeadingZero(minutes);\n  secondsValue.textContent = addLeadingZero(seconds);\n}\n"],"names":["startButton","daysValue","hoursValue","minutesValue","secondsValue","dateTimePicker","countdownInterval","selectedDate","options","selectedDates","now","flatpickr","timeRemaining","updateTimerDisplay","days","hours","minutes","seconds","convertMs","ms","addLeadingZero","value"],"mappings":"wIAGA,MAAMA,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAiB,SAAS,eAAe,iBAAiB,EAEhE,IAAIC,EAAoB,KACpBC,EAAe,KAEnBP,EAAY,SAAW,GAEvB,MAAMQ,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAM,IAAI,KAChBH,EAAeE,EAAc,CAAC,EAE1BF,GAAgBG,GAClB,MAAM,oCAAoC,EAC1CH,EAAe,KACfP,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAW,EAAUN,EAAgBG,CAAO,EAEjCR,EAAY,iBAAiB,QAAS,IAAM,CACtCM,GACF,cAAcA,CAAiB,EAGjCN,EAAY,SAAW,GACvBK,EAAe,SAAW,GAE1BC,EAAoB,YAAY,IAAM,CAEpC,MAAMM,EAAgBL,EADV,IAAI,KAGhB,GAAIK,GAAiB,EACnB,cAAcN,CAAiB,EAC/BO,EAAmB,EAAG,EAAG,EAAG,CAAC,MACxB,CACL,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAa,EACjEC,EAAmBC,EAAMC,EAAOC,EAASC,CAAO,CACjD,CACF,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUC,EAAI,CAMrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASG,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASR,EAAmBC,EAAMC,EAAOC,EAASC,EAAS,CACzDhB,EAAU,YAAcmB,EAAeN,CAAI,EAC3CZ,EAAW,YAAckB,EAAeL,CAAK,EAC7CZ,EAAa,YAAciB,EAAeJ,CAAO,EACjDZ,EAAa,YAAcgB,EAAeH,CAAO,CACnD"}